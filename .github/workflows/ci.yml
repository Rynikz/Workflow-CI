# Nama workflow yang akan muncul di tab "Actions" GitHub
name: CI - Latih, Simpan Artefak, dan Bangun Docker Image

on:
  push:
    branches: [ main ] # Pastikan Anda melakukan push ke branch 'main'
  # Menambahkan 'workflow_dispatch' agar bisa dijalankan secara manual untuk testing
  workflow_dispatch:

jobs:
  train-build-push:
    runs-on: ubuntu-latest

    steps:
      # Langkah 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Langkah 2: Menyiapkan Miniconda
      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.12.7"
      
      # Langkah 3: Membuat lingkungan kerja virtual
      - name: Create Conda Environment
        shell: bash -l {0}
        run: conda env create -f MLProject_folder/conda.yaml --name ml-ci-env

      # Langkah 4: Menjalankan proyek MLflow
      - name: Run MLflow Project
        shell: bash -l {0}
        run: |
          conda activate ml-ci-env
           mlflow run ./MLProject_folder

      # Langkah 5: Membaca Run ID dari file
      - name: Read Run ID from File
        id: find_run_id
        run: |
          # Pemeriksaan untuk memastikan file run_id.txt ada
          if [ ! -f run_id.txt ]; then
            echo "::error::File run_id.txt tidak ditemukan setelah MLflow run selesai."
            exit 1
          fi
          RUN_ID=$(cat run_id.txt)
          echo "Ditemukan Run ID dari file: $RUN_ID"
          echo "RUN_ID=$RUN_ID" >> $GITHUB_OUTPUT

      # Langkah 6: Mengemas artefak model
      - name: Package Model Artifact
        id: package_artifact
        shell: bash -l {0}
        run: |
          ARTIFACT_NAME="model-${{ steps.find_run_id.outputs.RUN_ID }}.tar.gz"
          echo "Nama arsip: $ARTIFACT_NAME"
          # Pemeriksaan untuk memastikan folder artefak ada
          if [ ! -d "mlruns/0/${{ steps.find_run_id.outputs.RUN_ID }}/artifacts/model" ]; then
            echo "::error::Folder artefak model tidak ditemukan!"
            ls -R mlruns
            exit 1
          fi
          tar -czvf $ARTIFACT_NAME -C mlruns/0/${{ steps.find_run_id.outputs.RUN_ID }}/artifacts/ model
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

       # ================== BAGIAN YANG DIGANTI TOTAL ==================
      # Langkah 7: Setup dan Konfigurasi rclone secara manual
      - name: Setup and Configure rclone for GDrive Upload
        run: |
          # 1. Simpan kredensial dari secret ke file sementara
          echo '${{ secrets.GDRIVE_CREDENTIALS }}' > gdrive_credentials.json
          
          # 2. Unduh dan instal rclone dari sumber resminya
          curl -O https://downloads.rclone.org/rclone-current-linux-amd64.zip
          unzip rclone-current-linux-amd64.zip
          sudo mv rclone-*-linux-amd64/rclone /usr/local/bin/
          
          # 3. Buat file konfigurasi rclone secara otomatis
          mkdir -p ~/.config/rclone
          echo "[gdrive]" > ~/.config/rclone/rclone.conf
          echo "type = drive" >> ~/.config/rclone/rclone.conf
          echo "scope = drive" >> ~/.config/rclone/rclone.conf
          # Memberi tahu rclone di mana file kunci service account berada
          echo "service_account_file = $(pwd)/gdrive_credentials.json" >> ~/.config/rclone/rclone.conf

      # Langkah 8: Upload ke Google Drive menggunakan rclone
      - name: Upload Artifact to Google Drive
        run: |
          # Perintah rclone untuk menyalin file ke folder tujuan di Google Drive
          rclone copyto model-${{ steps.find_run_id.outputs.RUN_ID }}.tar.gz gdrive:${{ secrets.GDRIVE_FOLDER_ID }}/model-run-${{ steps.find_run_id.outputs.RUN_ID }}.tar.gz
      # =========================================================================

      # Langkah 8: Login ke Docker Hub
      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request' # Langkah keamanan: jangan login pada pull request dari fork
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      # Langkah 9: Membangun dan mendorong Docker image
      - name: Build and Push Docker Image
        if: github.event_name != 'pull_request' # Langkah keamanan
        # GANTI 'NAMA_REPO_DOCKERHUB_ANDA' DI BAWAH INI
        shell: bash -l {0}
        run: |
          echo "Membangun Docker image..."
          conda activate ml-ci-env
          mlflow models build-docker \
            --model-uri "./mlruns/0/${{ steps.find_run_id.outputs.RUN_ID }}/artifacts/model" \
            --name "${{ secrets.DOCKERHUB_USERNAME }}/model-kelayakan-pendidikan:latest" \
            --env-manager=conda \
            --enable-mlserver
          
          echo "Mendorong image ke Docker Hub..."
          docker push "${{ secrets.DOCKERHUB_USERNAME }}/model-kelayakan-pendidikan:latest"
